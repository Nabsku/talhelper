package talos

import (
	"fmt"
	"log/slog"

	"github.com/budimanjojo/talhelper/v3/pkg/config"
	"github.com/siderolabs/talos/pkg/machinery/config/configpatcher"
)

// AddMultiDocs appends multi-documents machine configuration to the main machine configuration
// generated by upstream API. The documents are generated and applied as a strategic merge patch.
// It also returns an error, if any.
func AddMultiDocs(node *config.Node, mode string, corecfg []byte) ([]byte, error) {
	extradocs, err := genMultiDocs(node, mode)
	if err != nil {
		return nil, err
	}

	// TODO: A better way is to append them as documents and use upstream API
	// But the problem is upstream Generate API is generating not just the core config
	// Resulting in error because of duplicates with the ones we created
	slog.Debug("patching multidocs configurations to main configurations")
	var patches []configpatcher.Patch

	patch, err := configpatcher.LoadPatch(extradocs)
	if err != nil {
		return nil, err
	}
	patches = append(patches, patch)
	output, err := configpatcher.Apply(configpatcher.WithBytes(corecfg), patches)
	if err != nil {
		return nil, err
	}

	return output.Bytes()
}

func genMultiDocs(node *config.Node, mode string) ([]byte, error) {
	var result []byte

	if node.IngressFirewall != nil {
		slog.Debug(fmt.Sprintf("generating machine firewall config for %s", node.Hostname))
		nc, err := GenerateNetworkConfigBytes(node.IngressFirewall)
		if err != nil {
			return nil, err
		}
		result = append(result, nc...)
	}

	if len(node.ExtensionServices) > 0 {
		slog.Debug(fmt.Sprintf("generating machine extension service config for %s", node.Hostname))
		ext, err := GenerateExtensionServicesConfigBytes(node.ExtensionServices)
		if err != nil {
			return nil, err
		}
		result = append(result, ext...)
	}

	if len(node.Volumes) > 0 {
		slog.Debug(fmt.Sprintf("generating volume config for %s", node.Hostname))
		vc, err := GenerateVolumeConfigBytes(node.Volumes, mode)
		if err != nil {
			return nil, err
		}
		result = append(result, vc...)
	}

	if len(node.UserVolumes) > 0 {
		slog.Debug(fmt.Sprintf("generating user volume config for %s", node.Hostname))
		uvc, err := GenerateUserVolumeConfigBytes(node.UserVolumes, mode)
		if err != nil {
			return nil, err
		}
		result = append(result, uvc...)
	}

	return result, nil
}
